package com.pointhouse.chiguan.k1_4;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.pointhouse.chiguan.Application.GlobalApplication;
import com.pointhouse.chiguan.Application.MediaService;
import com.pointhouse.chiguan.R;
import com.pointhouse.chiguan.common.api.PayUtil;
import com.pointhouse.chiguan.common.util.Constant;
import com.pointhouse.chiguan.common.util.MediaServiceHelper;
import com.pointhouse.chiguan.common.util.ToolUtil;
import com.pointhouse.chiguan.db.PayInfo;
import com.pointhouse.chiguan.db.PayInfoDao;
import com.tencent.mm.opensdk.openapi.IWXAPI;
import com.tencent.mm.opensdk.openapi.WXAPIFactory;

import java.sql.SQLException;

import io.reactivex.android.schedulers.AndroidSchedulers;

/**
 * 课程购买
 * Created by Maclaine on 2017/7/25.
 */
public class PayActivity extends Activity {
    private static final String TAG = "PayActivity";

    public static final int ALIPAY = 0x001;
    public static final int WXPAY = 0x002;

    private ImageView imgAliCheck, imgWxCheck, backbtn;
    private TextView txtPay;
    private RelativeLayout aliCheckRL,wxCheckRL;

    private int payType = ALIPAY;
    private int productType;
    private int courseId;
    private double money;
    private final IWXAPI msgApi = WXAPIFactory.createWXAPI(this, Constant.WX_APP_ID);
    private PayInfoDao payInfoDao;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.k1_4_activity_pay);
        init();
        payInfoDao = new PayInfoDao(GlobalApplication.sContext);
    }

    @Override
    protected void onResume(){
        try {
            PayInfo payInfo = payInfoDao.queryCourseId(productType, courseId);
            if(payInfo != null && payInfo.getIsBuy()){
                payInfoDao.delete(payInfo);
                finish();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        super.onResume();
    }

    @Override
    protected void onDestroy() {
        GlobalApplication.waitPayId = -1;
        GlobalApplication.isCourse = -1;
        super.onDestroy();
    }

    float x1 = 0;
    float x2 = 0;
    float y1 = 0;
    float y2 = 0;

    @Override
    public boolean dispatchTouchEvent(MotionEvent event) {
        //继承了Activity的onTouchEvent方法，直接监听点击事件
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            //当手指按下的时候
            x1 = event.getX();
            y1 = event.getY();
        }
        if (event.getAction() == MotionEvent.ACTION_MOVE) {
            //当手指移动的时候
            x2 = event.getX();
            y2 = event.getY();
            if (y1 - y2 > 50) {
                MediaServiceHelper.getService(this, MediaService::backGroundHide);//隐藏
            } else if (y2 - y1 > 50) {
                MediaServiceHelper.getService(this, MediaService::reFleshDisplay);//显示
            }
        }
        return super.dispatchTouchEvent(event);
    }

    //初始化
    private void init() {
        initView();
        initStyle();
        initListener();
    }

    //初始化控件
    private void initView() {
        imgAliCheck = (ImageView) findViewById(R.id.imgAliCheck);
        imgWxCheck = (ImageView) findViewById(R.id.imgWxCheck);
        txtPay = (TextView) findViewById(R.id.txtPay);
        aliCheckRL = (RelativeLayout) findViewById(R.id.aliCheckRL);
        wxCheckRL = (RelativeLayout) findViewById(R.id.wxCheckRL);

        backbtn = (ImageView) findViewById(R.id.backbtn);
        backbtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                //当前页面销毁
                finish();
                //创建一个事件
                KeyEvent newEvent = new KeyEvent(KeyEvent.ACTION_DOWN,
                        KeyEvent.KEYCODE_BACK);
                //设置activity监听此事件，返回true只监听一次，如果返回false则继续监听
                PayActivity.this.onKeyDown(KeyEvent.KEYCODE_BACK, newEvent);
            }
        });

        LinearLayout backbtnll = (LinearLayout)findViewById(R.id.findBackBtnView);
        backbtnll.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                //当前页面销毁
                finish();
                //创建一个事件
                KeyEvent newEvent = new KeyEvent(KeyEvent.ACTION_DOWN,
                        KeyEvent.KEYCODE_BACK);
                //设置activity监听此事件，返回true只监听一次，如果返回false则继续监听
                onKeyDown(KeyEvent.KEYCODE_BACK, newEvent);
            }
        });

        Intent it = getIntent();
        TextView titleText = (TextView)findViewById(R.id.txt1) ;
        TextView titleText2 = (TextView)findViewById(R.id.txt2) ;
        TextView pay_text = (TextView)findViewById(R.id.pay_text) ;
        productType = it.getIntExtra("type",-1);
        titleText.setText(productType == 1 ? "课程" : "文章");
        titleText2.setText(it.getStringExtra("courseName"));
        money = it.getDoubleExtra("price",0);
        pay_text.setText("¥" + ToolUtil.doubleToString(money));
        courseId = it.getIntExtra("courseId",-1);
    }

    //初始化样式
    private void initStyle() {

    }

    //初始化监听
    private void initListener() {
        aliCheckRL.setOnClickListener(v -> {
            payType = ALIPAY;
            imgAliCheck.setImageResource(R.mipmap.gouxuangoumaifangshi);
            imgWxCheck.setImageResource(R.mipmap.weigouxuangoumaifangshi);
        });
        wxCheckRL.setOnClickListener(v -> {
            payType = WXPAY;
            imgWxCheck.setImageResource(R.mipmap.gouxuangoumaifangshi);
            imgAliCheck.setImageResource(R.mipmap.weigouxuangoumaifangshi);
        });
        txtPay.setOnClickListener(v -> {
            switch (payType) {
                case ALIPAY:
                    PayUtil.aliPayV2(this, String.valueOf(productType), String.valueOf(courseId), money)
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(result -> {
                                // 该笔订单是否真实支付成功，需要依赖服务端的异步通知。
                                if("9000".equals(result.getResultStatus())){
                                    Toast.makeText(PayActivity.this, "支付成功", Toast.LENGTH_SHORT).show();
                                    if(courseId != -1){
                                        PayInfo payInfo = new PayInfo();
                                        payInfo.setCourseId(courseId);
                                        payInfo.setIsBuy(true);
                                        payInfo.setIsPrompt(false);
                                        try {
                                            payInfoDao.save(payInfo);
                                        } catch (SQLException e) {
                                            e.printStackTrace();
                                        }
                                    }
                                    finish();
                                }else{
                                    Toast.makeText(PayActivity.this, "支付失败", Toast.LENGTH_SHORT).show();
                                }
                            },throwable -> {
                                Log.e(TAG,throwable.getMessage());
                                Toast.makeText(PayActivity.this, "支付失败", Toast.LENGTH_SHORT).show();
                            });
                    //当前页面销毁

                    break;
                case WXPAY:
                    PayUtil.WXPay(String.valueOf(productType), String.valueOf(courseId), money)
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(result->{
                                Log.d(TAG,"WXPAY");
                                GlobalApplication.waitPayId = courseId;
                                GlobalApplication.isCourse = productType;
                                msgApi.sendReq(result);
                            },throwable -> {
                                Log.e(TAG,throwable.getMessage());
                                Toast.makeText(PayActivity.this, getResources().getString(R.string.vip_pay_fail), Toast.LENGTH_SHORT).show();
                            });
                    //当前页面销毁
                    break;
            }
        });
    }
}
